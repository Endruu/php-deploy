<?phpclass DeployBase {	protected $projectPath = '';	protected $workDir = '';	protected $directories	= array();	protected $files		= array();		protected function initBase( $dbClass ) {		$this->projectPath	= $dbClass->projectPath;		$this->workDir		= $dbClass->workDir;		$this->directories	= $dbClass->directories;		$this->files		= $dbClass->files;	}		public function getWorkPath() {		if( $this->workDir === '' ) {			throw new Exception("Working directory not initialized!");		}		return $this->workDir;	}		public function getProjectPath() {		if( $this->projectPath === '' ) {			throw new Exception("Project path unknown!");		}		return $this->projectPath;	}		public function setProjectPath($path) {		if( $path !== '' ) {			if( !( file_exists($path) && is_dir($path) ) ) {				throw new Exception("Project path does not exist!");			}			$path = rtrim($path, " \t\n\r\0\x0B\\/");		}		return $this->projectPath = $path;	}		public function readDir( $dir = '.', $top = true ) {		$scan = array_diff(scandir($dir), array('..', '.'));				if( $dir === '.' ) {			$dir = '';		} else {			$dir .= '/';		}				foreach( $scan as $s ) {			$path = $dir . $s;			if( is_file($path) ) {				$this->files[] = $path;			} else {				$this->directories[] = $path;				$subdir_found = true;				$this->readDir($path, false);			}		}				if( $top ) {			$this->files = array_map(				function($n) {					$chop = $this->projectPath ? strlen($this->projectPath) + 1 : 0;					return substr($n, $chop);				},				$this->files			);			$this->directories = array_map(				function($n) {					$chop = $this->projectPath ? strlen($this->projectPath) + 1 : 0;					return substr($n, $chop);				},				$this->directories			);		}	}		public function writeDir( $path = '' ) {		sort($this->files);		$file = fopen($path.'files.txt', 'w');		if( !$file ) {			throw new Exception("Failed to open file: $path"."files.txt for writing!");		}		foreach( $this->files as $f ) {			fwrite($file, $f . "\n");		}		fclose($file);				sort($this->directories);		$file = fopen($path.'directories.txt', 'w');		if( !$file ) {			throw new Exception("Failed to open file: $path"."directories.txt for writing!");		}		foreach( $this->directories as $d ) {			fwrite($file, $d . "\n");		}		fclose($file);	}		protected function createWorkingDirectory() {		$dir = 'protected/work/' . date("ymd");		if( file_exists($dir) ) {			throw new Exception("Working directory already exists!");		}				if( !mkdir($dir, 0777, true) ) {			throw new Exception("Failed to create working directory!");		}		return $this->workDir = $dir . '/';	}	protected function removeFile( $file, $withPath = false ) {		$newfiles	= array();				foreach( $this->files as $f ) {			if( $withPath ) {				$ret = preg_match($file, $f);				if( $ret === 0 ) {					$newfiles[] = $f;				} else if( $ret === false ) {					throw new Exception("Failed to parse filename for excluding file! (1)");				}			} else {				$ret = preg_match("/.*[\/]([^\/]*)$/", $f, $m);				if( $ret ) {					$ret = preg_match($file, $m[1]);					if( $ret === 0 ) {						$newfiles[] = $f;					} else if( $ret === false ) {						throw new Exception("Failed to parse filename for excluding file! (2)");					}				} else if( $ret === false ) {					throw new Exception("Failed to parse filename to get dirname for excluding file!");				} else {					$ret = preg_match($file, $f);					if( $ret === 0 ) {						$newfiles[] = $f;					} else if( $ret === false ) {						throw new Exception("Failed to parse filename for excluding file! (3)");					}				}			}		}				$this->files = $newfiles;	}		protected function addFile( $file ) {		if( $this->projectPath ) {			$file = $this->projectPath .'/'. $file;		}				if( !file_exists($file) ) {			throw new Exception("Failed to include file: $file (not found)");		}				$ret = preg_match("/(.*)[\/][^\/]*$/", $file, $m);		if( $ret ) {			$this->addDir($m[1], false);		} else if( $ret === false ) {			throw new Exception("Failed to parse filename $file for including!");		}		$this->files[] = $file;		$this->files = array_unique( $this->files );	}		protected function removeDir( $dir ) {		$newdirs	= array();		$newfiles	= array();				foreach( $this->directories as $d ) {			$ret = preg_match($dir, $d);			if( $ret === 0 ) {				$newdirs[] = $d;			} else if( $ret === false ) {				throw new Exception("Failed to parse dirname for excluding directory!");			}		}		foreach( $this->files as $f ) {			$ret = preg_match("/(.*)[\/][^\/]*$/", $f, $m);			if( $ret ) {				$ret = preg_match($dir, $m[1]);				if( $ret === 0 ) {					$newfiles[] = $f;				} else if( $ret === false ) {					throw new Exception("Failed to parse filename for excluding directory!");				}			} else if( $ret === false ) {				throw new Exception("Failed to parse filename to get dirname for excluding directory!");			} else {				$newfiles[] = $f;			}					}				$this->files = $newfiles;		$this->directories = $newdirs;	}		protected function addDir( $dir, $prefix = true ) {		if( $prefix && $this->projectPath ) {			$dir = $this->projectPath .'/'. $dir;		}		$this->directories[] = $dir;		$this->directories = array_unique( $this->directories );	}		public function preDeployScript() {}	public function postDeployScript() {}}